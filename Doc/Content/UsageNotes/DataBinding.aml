<?xml version="1.0" encoding="utf-8"?>
<topic id="fd783396-0c32-4839-b171-a263aa40fabc" revisionNumber="1">
	<developerConceptualDocument
    xmlns="http://ddue.schemas.microsoft.com/authoring/2003/5"
    xmlns:xlink="http://www.w3.org/1999/xlink">

		<introduction>
			<para>All of the vCard and calendar property collections are derived from the
<codeEntityReference qualifyHint="false">T:EWSoftware.PDI.Binding.ExtendedBindingList`1</codeEntityReference>
class.  This generic collection class implements support for data binding as well as many other useful methods
for searching and sorting the collection items.  In addition, top-level properties on objects such as
<codeInline>VCard</codeInline>, <codeInline>VEvent</codeInline>, <codeInline>VToDo</codeInline>, etc. support
data binding on their child properties.</para>
		</introduction>

		<section>
			<title>Data Binding to Child Properties</title>
			<content>
				<para>The <codeInline>ExtendedBindingList&lt;T&gt;</codeInline> methods used for searching and sorting
take a predicate so you are free to define the code in any way that you like in order to find or sort the
elements.  In addition, the class implements the necessary methods so that if the collection is set as the data
source for a data grid view, it will respond to search and sort requests from the data grid view control.</para>

				<para>Most of the properties on the PDI objects such as <codeInline>VCard</codeInline> and
<codeInline>VEvent</codeInline> are complex objects themselves that can contain one or more child properties.
Support has been added for data binding to these child properties to make your code simpler.  In order to data
bind to a child property you simply specify the child property name separated from the parent property name with
an underscore.  For example:</para>

<code language="cs">
// Bind to the RepeatCount property on the VAlarm.Repeat property
udcRepeat.DataBindings.Add("Value", this.BindingSource, "Repeat_RepeatCount");

// Bind to the Value property on the VAlarm.Summary property
txtSummary.DataBindings.Add("Text", this.BindingSource, "Summary_Value");
</code>

<code language="vbnet">
' Bind to the RepeatCount property on the VAlarm.Repeat property
udcRepeat.DataBindings.Add("Value", Me.BindingSource, "Repeat_RepeatCount")

' Bind to the Value property on the VAlarm.Summary property
txtSummary.DataBindings.Add("Text", Me.BindingSource, "Summary_Value")
</code>

				<para>Support is provided for binding to child properties up to three levels deep.</para>

			</content>
		</section>

		<section>
			<title>Adding Child Property Binding Support to Non-PDI Classes</title>
			<content>
				<para>Child property data binding support can be extended to other classes dynamically at runtime using
the <codeInline>ChildPropertyTypeDescriptionProvider.Add</codeInline> method.  Simply pass it the type of the
class to which support should be extended.  This will normally be done in your application's startup code.</para>

<code language="cs">
// Add child property binding support to the NameAndAddress class
ChildPropertyTypeDescriptionProvider.Add(typeof(NameAndAddress));
</code>

<code language="vbnet">
' Add child property binding support to the NameAndAddress class
ChildPropertyTypeDescriptionProvider.Add(GetTyppe(NameAndAddress))
</code>

			</content>
		</section>

		<section>
			<title>Using the Browse Control</title>
			<content>
				<para><codeInline>BrowseControl</codeInline> is a derived <codeInline>UserControl</codeInline> that you
can use to browse a collection of objects one at a time.  It contains a built-in navigation tool strip.  To use
the control, derive a new user control from it and override the <codeInline>BindToControls</codeInline> method to
add data bindings to items in the collection and the <codeInline>EnableControls</codeInline> method to enable or
disable controls when the control is created or when all items in the collection have been deleted.</para>

				<para>To specify the collection to browse, assign it to the control's
<codeInline>BindingSource.DataSource</codeInline> property.</para>

<code language="cs">
// Edit the Attendees collection
ucAttendees.BindingSource.DataSource = evt.Attendees;
</code>

<code language="vbnet">
' Edit the Attendees collection
ucAttendees.BindingSource.DataSource = evt.Attendees
</code>

				<para>Note that assigning the collection directly to the data source property will cause changes to be
stored directly to the collection items.  If you want to edit a copy of the collection and retrieve the changes
if the user chooses to save them, you can assign a copy of the collection to it.  To retrieved the changed
values, you clear the existing collection and add the items from the modified collection.</para>

<code language="cs">
// Clone the Attendees collection and edit that instead
ucAttendees.BindingSource.DataSource = new AttendeePropertyCollection().CloneRange(e.Attendees);

...

// Clear the existing entries and add the modified copies
evt.Attendees.Clear();
evt.Attendees.CloneRange((AttendeePropertyCollection)ucAttendees.BindingSource.DataSource);
</code>

<code language="vbnet">
// Clone the Attendees collection and edit that instead
ucAttendees.BindingSource.DataSource = New AttendeePropertyCollection().CloneRange(e.Attendees)

...

' Clear the existing entries and add the modified copies
evt.Attendees.Clear()
evt.Attendees.CloneRange(DirectCast(ucAttendees.BindingSource.DataSource, AttendeePropertyCollection));
</code>

				<para>The vCard browser and calendar browser demo applications contain several examples of using this
control to edit collections.</para>

			</content>
		</section>

		<relatedTopics>
			<link xlink:href="695cc5b6-0937-42cd-9e7a-2f8aab4f09b0" />
		</relatedTopics>

	</developerConceptualDocument>
</topic>
